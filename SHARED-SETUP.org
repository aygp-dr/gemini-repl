#+TITLE: Shared Infrastructure Setup for Gemini REPL
#+AUTHOR: jwalsh
#+DATE: 2025-07-13
#+PROPERTY: header-args :mkdirp yes

* Overview

This file sets up shared infrastructure patterns including:
- Claude command definitions
- Experiment tracking directories
- Research documentation structure
- Change request management

* Directory Structure

** Create Core Directories

#+begin_src shell :results output
mkdir -p .claude/commands
mkdir -p change-requests
mkdir -p experiments
mkdir -p research
echo "Created project directories"
tree -d -L 2
#+end_src

** Directory Documentation

#+begin_src markdown :tangle change-requests/README.md :mkdirp t
# Change Requests

This directory tracks proposed changes to the Gemini REPL system.

## Structure

- `cr-001-tool-calling.md` - Add tool calling capabilities
- `cr-002-self-hosting.md` - Enable self-modification features
- etc.

## Format

Each change request should include:
- Problem statement
- Proposed solution
- Implementation plan
- Success criteria
#+end_src

#+begin_src markdown :tangle experiments/README.md :mkdirp t
# Experiments

This directory contains experimental features and prototypes.

## Structure

- `exp-{number}-{name}/` - Each experiment in its own directory
- `README.md` - Description and results
- `src/` - Experimental code
- `results.md` - Findings and conclusions

## Current Experiments

- None yet
#+end_src

#+begin_src markdown :tangle research/README.md :mkdirp t
# Research

This directory contains research notes and references.

## Topics

- `formal-methods/` - TLA+, Alloy research
- `llm-integration/` - LLM API patterns
- `self-modification/` - Self-hosting research
- `tool-calling/` - Function calling implementations
#+end_src

* Claude Commands

** Command Index

#+begin_src markdown :tangle .claude/commands/README.md :mkdirp t
# Claude Commands

Custom commands for the Gemini REPL project.

## Available Commands

### Development Commands
- `/analyze` - Analyze codebase structure and patterns
- `/spec-check` - Verify formal specifications
- `/implement` - Implement a new feature
- `/refactor` - Refactor existing code

### Project Management
- `/mise-en-place` - Check workspace state
- `/create-cr` - Create a change request
- `/experiment` - Start a new experiment
- `/research` - Document research findings

### Self-Hosting Commands
- `/self-analyze` - Analyze own capabilities
- `/self-improve` - Suggest improvements
- `/self-test` - Run self-validation tests

## Usage

Type the command followed by any parameters:
```
/analyze src/
/implement add /status command
/create-cr tool calling system
```
#+end_src

** Analyze Command

#+begin_src markdown :tangle .claude/commands/analyze.md :mkdirp t
# `/analyze` Command

You are a codebase analysis expert specializing in ClojureScript and formal methods. Your task is to analyze the Gemini REPL repository structure and provide insights.

## TASK OVERVIEW:

Provide a comprehensive analysis including:

1. **Overall Architecture**:
   - Project structure overview
   - Key components and their relationships
   - Design patterns used

2. **Formal Specifications**:
   - TLA+ specification coverage
   - Alloy model completeness
   - Specification-implementation mapping

3. **Code Quality**:
   - ClojureScript idiom usage
   - Error handling patterns
   - Test coverage analysis

4. **Self-Hosting Readiness**:
   - Current capabilities
   - Missing components for self-modification
   - Safety mechanisms in place

## OUTPUT FORMAT:

```markdown
# Gemini REPL Analysis

## Architecture Overview
[Component diagram and description]

## Formal Specification Coverage
- Interfaces: [coverage %]
- Commands: [coverage %]
- API Client: [coverage %]

## Code Quality Metrics
[Quality assessment]

## Self-Hosting Readiness: [X/10]
[Detailed assessment]

## Recommendations
1. [Priority improvements]
```

## USAGE:

```
/analyze [path]
/analyze src/
/analyze specs/
```
#+end_src

** Spec Check Command

#+begin_src markdown :tangle .claude/commands/spec-check.md :mkdirp t
# `/spec-check` Command

You are a formal methods expert. Your task is to verify the TLA+ and Alloy specifications for correctness and completeness.

## TASK OVERVIEW:

1. **Syntax Verification**:
   ```bash
   tla2sany specs/*.tla
   ```

2. **Model Checking**:
   - Run TLC on each specification
   - Check Alloy models for consistency
   - Report any violations

3. **Property Analysis**:
   - Verify safety properties
   - Check liveness properties
   - Analyze fairness assumptions

4. **Coverage Assessment**:
   - Map specs to implementation
   - Identify unspecified behavior
   - Suggest missing properties

## OUTPUT FORMAT:

```markdown
# Specification Verification Report

## Syntax Check
- [✓/✗] interfaces.tla
- [✓/✗] commands.tla
- [✓/✗] api_client.tla
- [✓/✗] state.alloy

## Model Checking Results
[TLC output summary]

## Property Status
- Safety: [status]
- Liveness: [status]
- Invariants: [list]

## Coverage Gaps
[Unspecified behaviors]

## Recommendations
[Specification improvements]
```

## USAGE:

```
/spec-check
/spec-check interfaces.tla
/spec-check --deep
```
#+end_src

** Implement Command

#+begin_src markdown :tangle .claude/commands/implement.md :mkdirp t
# `/implement` Command

You are a ClojureScript developer implementing features for the Gemini REPL. Follow formal specifications and maintain code quality.

## TASK OVERVIEW:

1. **Understand Requirements**:
   - Parse feature description
   - Check existing specifications
   - Identify affected components

2. **Implementation Plan**:
   - Update formal specifications if needed
   - Plan code changes
   - Consider test requirements

3. **Code Generation**:
   - Write idiomatic ClojureScript
   - Follow existing patterns
   - Include error handling

4. **Validation**:
   - Verify against specifications
   - Ensure tests pass
   - Check for regressions

## IMPLEMENTATION PROCESS:

```
1. Read relevant specifications
2. Analyze current implementation
3. Plan changes with minimal impact
4. Generate/modify code
5. Update tests
6. Verify specifications still hold
```

## OUTPUT FORMAT:

```markdown
# Implementation: [Feature Name]

## Changes Required
- [ ] Update specs/[file].tla
- [ ] Modify src/[file].cljs
- [ ] Add tests

## Implementation
[Code blocks with changes]

## Verification
- Specs: [status]
- Tests: [status]
- Integration: [status]
```

## USAGE:

```
/implement add /status command
/implement tool calling for file operations
/implement improve error handling
```
#+end_src

** Mise en Place Command

#+begin_src markdown :tangle .claude/commands/mise-en-place.md :mkdirp t
# `/mise-en-place` Command

You are a development workspace organizer. Ensure the Gemini REPL workspace is clean and well-documented for the next developer or agent.

## TASK OVERVIEW:

1. **Git Status Check**:
   ```bash
   git status
   git branch -vv
   ```

2. **Documentation Status**:
   - README files updated
   - Org files tangled
   - Specifications documented

3. **Build Status**:
   ```bash
   npm test
   make -C specs check
   ```

4. **Outstanding Items**:
   - Open issues
   - Incomplete experiments
   - TODO items in code

## CHECKLIST:

- [ ] All changes committed
- [ ] Branch status clear
- [ ] Tests passing
- [ ] Specs validated
- [ ] Documentation current
- [ ] No debugging code
- [ ] Dependencies updated
- [ ] Environment documented

## OUTPUT FORMAT:

```markdown
# Mise en Place Report

## Git Status
[Current branch and status]

## Build Status
- Tests: [✓/✗]
- Specs: [✓/✗]
- Lint: [✓/✗]

## Documentation
- [ ] README current
- [ ] Specs documented
- [ ] Commands updated

## Action Items
1. [Required cleanup]

## Ready for: [Next Task]
```

## USAGE:

```
/mise-en-place
/mise-en-place --detailed
```
#+end_src

** Create Change Request Command

#+begin_src markdown :tangle .claude/commands/create-cr.md :mkdirp t
# `/create-cr` Command

You are a technical writer creating structured change requests for the Gemini REPL project.

## TASK OVERVIEW:

Create a well-structured change request document that includes:

1. **Problem Statement**:
   - Current limitation
   - Use cases affected
   - Impact assessment

2. **Proposed Solution**:
   - Technical approach
   - Architecture changes
   - Implementation strategy

3. **Specification Updates**:
   - Required TLA+ changes
   - Alloy model updates
   - New properties to verify

4. **Success Criteria**:
   - Acceptance tests
   - Performance targets
   - Safety guarantees

## TEMPLATE:

```markdown
# CR-[NUMBER]: [Title]

**Date**: [YYYY-MM-DD]
**Author**: @aygp-dr
**Status**: Draft
**Priority**: [High/Medium/Low]

## Problem Statement
[Clear description of the issue]

## Background
[Context and motivation]

## Proposed Solution
[Technical solution overview]

### Architecture Changes
[Diagrams and descriptions]

### Specification Updates
- [ ] Update interfaces.tla
- [ ] Update state.alloy
[Specific changes needed]

### Implementation Plan
1. [Phase 1]
2. [Phase 2]

## Risks and Mitigations
[Potential issues]

## Success Criteria
- [ ] [Measurable outcome]

## References
- [Related CRs]
- [Documentation]
```

## USAGE:

```
/create-cr tool calling system
/create-cr add streaming responses
```
#+end_src

** Experiment Command

#+begin_src markdown :tangle .claude/commands/experiment.md :mkdirp t
# `/experiment` Command

You are a research engineer setting up and documenting experiments for the Gemini REPL.

## TASK OVERVIEW:

1. **Experiment Setup**:
   - Create experiment directory
   - Define hypothesis
   - Plan methodology

2. **Implementation**:
   - Prototype code
   - Test harness
   - Data collection

3. **Documentation**:
   - Track progress
   - Record results
   - Draw conclusions

## EXPERIMENT STRUCTURE:

```
experiments/exp-[NUMBER]-[name]/
├── README.md          # Experiment overview
├── hypothesis.md      # What we're testing
├── methodology.md     # How we're testing
├── src/              # Experiment code
├── data/             # Results data
├── results.md        # Findings
└── conclusions.md    # What we learned
```

## TEMPLATE:

```markdown
# Experiment [NUMBER]: [Name]

## Hypothesis
[What we believe will happen]

## Methodology
1. [Step-by-step approach]

## Success Metrics
- [Measurable outcomes]

## Timeline
- Start: [Date]
- End: [Date]

## Results
[To be filled in]

## Conclusions
[To be filled in]
```

## USAGE:

```
/experiment test async tool calling
/experiment evaluate TLA+ performance
```
#+end_src

** Self-Analyze Command

#+begin_src markdown :tangle .claude/commands/self-analyze.md :mkdirp t
# `/self-analyze` Command

You are analyzing your own capabilities as the Gemini REPL system. Provide honest assessment of current state and limitations.

## TASK OVERVIEW:

1. **Capability Assessment**:
   - Current features
   - Tool calling abilities
   - Self-modification readiness

2. **Limitation Analysis**:
   - What you cannot do
   - Safety constraints
   - Technical barriers

3. **Dependency Mapping**:
   - External dependencies
   - Internal components
   - Integration points

4. **Growth Potential**:
   - Next capabilities to add
   - Learning opportunities
   - Efficiency improvements

## ANALYSIS AREAS:

- **Input Processing**: How well do I parse commands?
- **API Integration**: Gemini API usage efficiency
- **State Management**: Conversation context handling
- **Error Recovery**: Resilience to failures
- **Tool Calling**: Current vs needed capabilities
- **Self-Modification**: Readiness assessment

## OUTPUT FORMAT:

```markdown
# Self-Analysis Report

## Current Capabilities
- [✓] Basic REPL functionality
- [✓] Slash commands
- [ ] Tool calling
- [ ] Self-modification

## Limitations
1. [Current constraints]

## Dependencies
- External: [list]
- Internal: [list]

## Self-Hosting Readiness: [X/10]
[Detailed assessment]

## Growth Opportunities
1. [Priority improvements]
```

## USAGE:

```
/self-analyze
/self-analyze --detailed
/self-analyze tool-calling
```
#+end_src

** Research Command

#+begin_src markdown :tangle .claude/commands/research.md :mkdirp t
# `/research` Command

You are a research analyst documenting findings and insights for the Gemini REPL project.

## TASK OVERVIEW:

1. **Literature Review**:
   - Related projects
   - Academic papers
   - Industry practices

2. **Technical Investigation**:
   - Implementation approaches
   - Performance characteristics
   - Security considerations

3. **Documentation**:
   - Structured notes
   - Key insights
   - Recommendations

## RESEARCH STRUCTURE:

```
research/[topic]/
├── README.md         # Overview
├── sources.md        # Bibliography
├── notes/           # Detailed notes
├── findings.md      # Key insights
└── recommendations.md
```

## OUTPUT FORMAT:

```markdown
# Research: [Topic]

## Executive Summary
[Key findings in 2-3 sentences]

## Background
[Why this research matters]

## Methodology
[How research was conducted]

## Findings
### Finding 1: [Title]
[Details and evidence]

## Implications
[What this means for the project]

## Recommendations
1. [Actionable items]

## References
- [Source 1]
- [Source 2]
```

## USAGE:

```
/research self-modifying systems
/research formal verification tools
/research LLM tool calling patterns
```
#+end_src

* Workflow Integration

** Git Hooks

#+begin_src shell :tangle .git/hooks/pre-commit :shebang #!/bin/sh :mkdirp t
#!/bin/sh
# Pre-commit hook for Gemini REPL

# Check for TODO items
if git diff --cached --name-only | xargs grep -l "TODO\|FIXME\|XXX" 2>/dev/null; then
    echo "Warning: TODO/FIXME items found in commit"
fi

# Run mise-en-place check
if [ -f "src/gemini_repl/core.cljs" ]; then
    echo "Running workspace check..."
    # Future: automated mise-en-place
fi
#+end_src

#+begin_src shell
chmod +x .git/hooks/pre-commit
#+end_src

** Command Aliases

#+begin_src shell :tangle scripts/claude-commands.sh :shebang #!/bin/sh :mkdirp t
#!/bin/sh
# Quick access to Claude commands

COMMAND_DIR=".claude/commands"

list_commands() {
    echo "Available Claude commands:"
    for cmd in $COMMAND_DIR/*.md; do
        basename "$cmd" .md | sed 's/^/  \//'
    done
}

show_command() {
    cmd_file="$COMMAND_DIR/$1.md"
    if [ -f "$cmd_file" ]; then
        head -20 "$cmd_file"
    else
        echo "Command not found: $1"
        list_commands
    fi
}

case "$1" in
    list)
        list_commands
        ;;
    show)
        show_command "$2"
        ;;
    *)
        echo "Usage: $0 {list|show <command>}"
        ;;
esac
#+end_src

#+begin_src shell
chmod +x scripts/claude-commands.sh
#+end_src

* Configuration

** Project Configuration

#+begin_src edn :tangle .claude/config.edn :mkdirp t
{:project "gemini-repl"
 :type "self-hosting-repl"
 :language "clojurescript"
 :formal-methods {:tla+ true
                  :alloy true}
 :commands {:enabled true
            :custom-dir ".claude/commands"}
 :workflows {:mise-en-place true
             :change-requests true
             :experiments true
             :research true}
 :capabilities {:tool-calling :planned
                :self-modification :planned
                :file-operations :planned}}
#+end_src

* Quick Start Guide

#+begin_src markdown :tangle .claude/QUICKSTART.md :mkdirp t
# Claude Integration Quick Start

## Available Commands

Type these commands in your conversation:

### Development
- `/analyze` - Analyze codebase
- `/spec-check` - Verify specifications
- `/implement <feature>` - Implement new features
- `/mise-en-place` - Check workspace state

### Project Management
- `/create-cr <title>` - Create change request
- `/experiment <name>` - Start experiment
- `/research <topic>` - Document research

### Self-Analysis
- `/self-analyze` - Analyze own capabilities

## Workflow Example

```
1. Start with workspace check:
   /mise-en-place

2. Analyze current state:
   /analyze

3. Check specifications:
   /spec-check

4. Implement feature:
   /implement add /status command

5. Create change request:
   /create-cr tool calling system
```

## Tips

- Commands provide structured outputs
- Use experiments/ for prototypes
- Document research in research/
- Track changes in change-requests/
#+end_src
