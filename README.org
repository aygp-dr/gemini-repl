#+TITLE: Gemini REPL
#+AUTHOR: jwalsh
#+DATE: 2025-07-13

[[https://github.com/aygp-dr/gemini-repl/blob/main/LICENSE][https://img.shields.io/badge/License-MIT-blue.svg]]
[[https://www.freebsd.org/][https://img.shields.io/badge/FreeBSD-14.3-red.svg]]
[[https://clojure.org/releases/tools][https://img.shields.io/badge/Clojure-1.12.0-blue.svg]]
[[https://nodejs.org/][https://img.shields.io/badge/Node.js-22.14-green.svg]]
[[https://lamport.azurewebsites.net/tla/tla.html][https://img.shields.io/badge/TLA+-1.8.0-purple.svg]]
[[https://alloytools.org/][https://img.shields.io/badge/Alloy-6.0.0-orange.svg]]
[[https://orgmode.org/][https://img.shields.io/badge/Org--Mode-9.7-green.svg]]

* Overview

An interactive console application for the Google Gemini API with formal specifications.

* Setup

1. Copy =.env.example= to =.env= and add your API key
2. Install dependencies (see language-specific instructions)
3. Run the REPL

* Project Structure

- =specs/= - Formal specifications (TLA+, Alloy)
- =src/= - Implementation
- =tests/= - Property-based tests
- =docs/= - Documentation

* Features

** Current Features

*** Core REPL Functionality
- Interactive console for Gemini API interactions
- Slash commands (=/help=, =/exit=, =/clear=, =/stats=, =/debug=, =/context=)
- Session state tracking with token usage and cost estimation
- Environment-based configuration

*** Commands Available
- =/help= - Show available commands
- =/exit= - Exit the REPL
- =/clear= - Clear the screen
- =/stats= - Show session usage statistics
- =/debug= - Toggle debug logging
- =/context= - Show conversation context (messages in history)

*** UI Example

#+BEGIN_SRC
┏━╸┏━╸┏┳┓╻┏┓╻╻   ┏━┓┏━╸┏━┓╻  
┃╺┓┣╸ ┃┃┃┃┃┗┫┃   ┣┳┛┣╸ ┣━┛┃  
┗━┛┗━╸╹ ╹╹╹ ╹╹   ╹┗╸┗━╸╹  ┗━╸

  🤖 Self-Hosting ClojureScript REPL
  📝 Logging enabled via GEMINI_LOG_ENABLED
  🔍 Type /help for commands

gemini> What is recursion in programming?

Thinking...

Recursion in programming is a technique where a function calls itself to solve a problem by breaking it down into smaller, similar subproblems. It consists of two essential parts:

1. **Base Case**: A condition that stops the recursion
2. **Recursive Case**: The function calling itself with modified parameters

Here's a simple example calculating factorial:

```javascript
function factorial(n) {
  if (n <= 1) return 1;        // Base case
  return n * factorial(n - 1);  // Recursive case
}
```

[🟢 245 tokens | $0.0001 | 0.8s]

gemini> /stats

📊 Session Statistics
─────────────────────
Total tokens: 245
Total cost: $0.000147
Requests made: 1
Average cost per request: $0.000147

gemini> /help

Commands:
  /help   - Show this help
  /exit   - Exit the REPL
  /clear  - Clear the screen
  /debug  - Toggle debug logging
  /stats  - Show session usage statistics

Or type any text to send to Gemini

gemini> _
#+END_SRC

** Development Commands

#+BEGIN_SRC bash
# Build and run
gmake build
gmake run

# Development with live reload
gmake dev
gmake dashboard      # Start tmux development dashboard

# Testing
gmake test          # Run all tests (unit + interactive)
gmake test-cljs     # Run ClojureScript unit tests only
gmake test-repl     # Run interactive REPL tests only

# Linting
gmake lint          # Run all linting checks
gmake check-lint-tools  # Check if linting tools are installed

# Cleaning
gmake clean         # Clean build artifacts
gmake distclean     # Deep clean including downloaded tools

# Create release
gmake release       # Create a new patch release
gmake release-minor # Create a new minor release
gmake release-major # Create a new major release
#+END_SRC

** Configuration

Set these environment variables to customize behavior:

#+BEGIN_SRC bash
# Required
export GEMINI_API_KEY="your-api-key"

# Optional UI settings
export GEMINI_SHOW_METADATA=true     # Show response metadata
export GEMINI_MODEL=gemini-2.0-flash # Model selection
export GEMINI_TEMPERATURE=0.9        # Response creativity
export GEMINI_MAX_TOKENS=2048        # Max response length

# Logging configuration
export GEMINI_LOG_ENABLED=true       # Enable logging
export GEMINI_LOG_TYPE=both          # fifo, file, or both
export GEMINI_LOG_LEVEL=debug        # debug or info
#+END_SRC

** Quick Start

#+BEGIN_SRC bash
# Install dependencies
gmake install

# Run tests
gmake test

# Start REPL
gmake run

# Development mode with hot reload
gmake dev
#+END_SRC


* Formal Methods

This project uses formal specifications to define system behavior before implementation.
See =specs/README.org= for details.