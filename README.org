#+TITLE: Gemini REPL
#+AUTHOR: jwalsh
#+DATE: 2025-07-13

[[https://github.com/aygp-dr/gemini-repl/blob/main/LICENSE][https://img.shields.io/badge/License-MIT-blue.svg]]
[[https://www.freebsd.org/][https://img.shields.io/badge/FreeBSD-14.3-red.svg]]
[[https://clojure.org/releases/tools][https://img.shields.io/badge/Clojure-1.12.0-blue.svg]]
[[https://nodejs.org/][https://img.shields.io/badge/Node.js-22.14-green.svg]]
[[https://lamport.azurewebsites.net/tla/tla.html][https://img.shields.io/badge/TLA+-1.8.0-purple.svg]]
[[https://alloytools.org/][https://img.shields.io/badge/Alloy-6.0.0-orange.svg]]
[[https://orgmode.org/][https://img.shields.io/badge/Org--Mode-9.7-green.svg]]

* Overview

An interactive console application for the Google Gemini API with formal specifications.

* Setup

1. Copy =.env.example= to =.env= and add your API key
2. Install dependencies (see language-specific instructions)
3. Run the REPL

* Project Structure

- =specs/= - Formal specifications (TLA+, Alloy)
- =src/= - Implementation
- =tests/= - Property-based tests
- =docs/= - Documentation

* Features

** Current Features

*** Core REPL Functionality
- Interactive console for Gemini API interactions
- Slash commands (=/help=, =/exit=, =/clear=, =/stats=, =/debug=)
- Session state tracking with token usage and cost estimation
- Environment-based configuration

*** Enhanced UI (NEW!)
- **üîπ Confidence Indicators**: Visual feedback on response quality
  - üü¢ High confidence (>95%)
  - üü° Medium confidence (>80%)
  - üî¥ Low confidence (‚â§80%)
- **üìä Response Metadata**: Detailed information when =GEMINI_SHOW_METADATA=true=
  - Token usage and costs
  - Response timing
  - Session totals
- **üìù Comprehensive Logging**: FIFO and file logging with configurable levels

*** UI Example

#+BEGIN_SRC
‚îè‚îÅ‚ï∏‚îè‚îÅ‚ï∏‚îè‚î≥‚îì‚ïª‚îè‚îì‚ïª‚ïª   ‚îè‚îÅ‚îì‚îè‚îÅ‚ï∏‚îè‚îÅ‚îì‚ïª  
‚îÉ‚ï∫‚îì‚î£‚ï∏ ‚îÉ‚îÉ‚îÉ‚îÉ‚îÉ‚îó‚î´‚îÉ   ‚î£‚î≥‚îõ‚î£‚ï∏ ‚î£‚îÅ‚îõ‚îÉ  
‚îó‚îÅ‚îõ‚îó‚îÅ‚ï∏‚ïπ ‚ïπ‚ïπ‚ïπ ‚ïπ‚ïπ   ‚ïπ‚îó‚ï∏‚îó‚îÅ‚ï∏‚ïπ  ‚îó‚îÅ‚ï∏

  ü§ñ Self-Hosting ClojureScript REPL
  üìù Logging enabled via GEMINI_LOG_ENABLED
  üîç Type /help for commands

gemini> What is recursion in programming?

Thinking...

Recursion in programming is a technique where a function calls itself to solve a problem by breaking it down into smaller, similar subproblems. It consists of two essential parts:

1. **Base Case**: A condition that stops the recursion
2. **Recursive Case**: The function calling itself with modified parameters

Here's a simple example calculating factorial:

```javascript
function factorial(n) {
  if (n <= 1) return 1;        // Base case
  return n * factorial(n - 1);  // Recursive case
}
```

[üü¢ 245 tokens | $0.0001 | 0.8s]

gemini> /stats

üìä Session Statistics
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Total tokens: 245
Total cost: $0.000147
Requests made: 1
Average cost per request: $0.000147

gemini> /help

Commands:
  /help   - Show this help
  /exit   - Exit the REPL
  /clear  - Clear the screen
  /debug  - Toggle debug logging
  /stats  - Show session usage statistics

Or type any text to send to Gemini

gemini> _
#+END_SRC

*** Development Infrastructure
- **üß™ Testing**: Unit tests for core functionality (=gmake test-cljs=)
- **üîç Linting**: ClojureScript (clj-kondo) and shell script linting
- **üöÄ CI/CD**: GitHub Actions for automated testing and linting
- **üì¶ Release Management**: Automated versioning and release creation

** Configuration

Set these environment variables to customize behavior:

#+BEGIN_SRC bash
# Required
export GEMINI_API_KEY="your-api-key"

# Optional UI settings
export GEMINI_SHOW_METADATA=true     # Show response metadata
export GEMINI_MODEL=gemini-2.0-flash # Model selection
export GEMINI_TEMPERATURE=0.9        # Response creativity
export GEMINI_MAX_TOKENS=2048        # Max response length

# Logging configuration
export GEMINI_LOG_ENABLED=true       # Enable logging
export GEMINI_LOG_TYPE=both          # fifo, file, or both
export GEMINI_LOG_LEVEL=debug        # debug or info
#+END_SRC

** Quick Start

#+BEGIN_SRC bash
# Install dependencies
gmake install

# Run tests
gmake test

# Start REPL
gmake run

# Development mode with hot reload
gmake dev
#+END_SRC

** Future Work: Self-Hosting Experimentation Platform üöÄ

*** Vision
Transform the REPL into a self-improving system that can modify its own code through experimentation.

*** Planned Features (Issue #43)

**** üß™ Git Worktree Experiments
- Create isolated experiments: =/experiment new <name>=
- Switch between experiments: =/experiment switch <name>=
- Test and merge successful changes

**** üêï Dogfooding Mode
- Enable with =/dogfood= command
- REPL can modify its own source code
- Hot-reload changes automatically
- AI-assisted feature development

**** üìö Research Documentation
- =/research new <topic>= - Create research documents
- =/research log <finding>= - Track experimental results
- Automatic org-mode documentation

**** Example Workflow
#+BEGIN_SRC
> /experiment new ui-enhancement "Add color themes"
üß™ Creating experiment: ui-enhancement

> /dogfood
üêï Dogfooding mode enabled!

> Add a dark theme option to the REPL
[REPL modifies its own code...]
‚úÖ Feature added! Try /theme dark

> /research log "Dark theme reduces eye strain in terminal"
üìù Finding logged
#+END_SRC

This speculative feature represents the ultimate goal: a REPL that evolves through self-experimentation.

* Formal Methods

This project uses formal specifications to define system behavior before implementation.
See =specs/README.md= for details.